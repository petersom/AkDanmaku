apply plugin: 'maven-publish'
apply plugin: 'signing'

task androidSourcesJar(type: Jar) {
    if (project.hasProperty('android')) {
        from android.sourceSets.main.java.sourceFiles
    } else {
        from sourceSets.main.allSource
    }
    classifier 'sources'
}
task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    classifier 'javadoc'
}
tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

ext {
    PUBLISH_ARTIFACT_ID = "akdanmaku"
}

ext['signing.keyId'] = ''
ext['signing.password'] = ''
ext['signing.secretKeyRingFile'] = ''
ext['ossrhUsername'] = ''
ext['ossrhPassword'] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println 'Found secret props file, loading props'
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println 'No props file, loading env vars'
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {

                groupId GROUP
                artifactId 'akdanmaku'
                version VERSION_NAME

               if (project.hasProperty("android")) {
                   artifact("$buildDir/outputs/aar/library-release.aar")
                   artifact androidSourcesJar
               } else {
                   artifact("$buildDir/libs/${project.getName()}.jar")
                   artifact androidSourcesJar
                   artifact javadocJar
               }
                pom {
                    packaging 'aar'
                    name = 'AkDanmaku'
                    description = rootProject.name
                    version = VERSION_NAME
                    url = POM_URL
                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                        }
                    }
                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                        }
                    }
                    scm {
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                        url = POM_SCM_URL
                    }
                    withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')

                        project.configurations.implementation.allDependencies.each {
                            if (it.group != null) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name = 'AkDanmaku'
                url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'

                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }
    signing {
        sign publishing.publications.release
    }
}
